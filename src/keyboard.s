; keyboard is connected throught the VIA PORTA
;
;
.feature string_escapes +
KEYBOARD_MAP:
  .byte "????????????? `?"            ; 00-0F
  .byte "?????q1???zsaw2?"            ; 10-1F
  .byte "?cxde43?? vftr5?"            ; 20-2F
  .byte "?nbhgy6???mju78?"            ; 30-3F
  .byte "?,kio09??./l;p-?"            ; 40-4F
  .byte "??'?[=?????]?\\??"            ; 50-5F
  .byte "?????????1?47???"            ; 60-6F
  .byte "0.2568???+3-*9??"            ; 70-7F
  .byte "????????????????"            ; 80-8F
  .byte "????????????????"            ; 90-9F
  .byte "????????????????"            ; A0-AF
  .byte "????????????????"            ; B0-BF
  .byte "????????????????"            ; C0-CF
  .byte "????????????????"            ; D0-DF
  .byte "????????????????"            ; E0-EF
  .byte "????????????????"            ; F0-FF

KEYBOARD_MAP_SHIFTED:
  .byte "????????????? ~?"            ; 00-0F
  .byte "?????Q!???ZSAW@?"            ; 10-1F
  .byte "?CXDE#$?? VFTR%?"            ; 20-2F
  .byte "?NBHGY^???MJU&*?"            ; 30-3F
  .byte "?<KIO)(??>?L:P_?"            ; 40-4F
  .byte "??\"?{+?????}?|??"          ; 50-5F
  .byte "?????????1?47???"          ; 60-6F
  .byte "0.2568???+3-*9??"          ; 70-7F
  .byte "????????????????"          ; 80-8F
  .byte "????????????????"          ; 90-9F
  .byte "????????????????"          ; A0-AF
  .byte "????????????????"          ; B0-BF
  .byte "????????????????"          ; C0-CF
  .byte "????????????????"          ; D0-DF
  .byte "????????????????"          ; E0-EF
  .byte "????????????????"          ; F0-FF
.feature string_escapes -

RELEASE = %00000001
SHIFT   = %00000010

; modifies A, X
; leaves key in A
KEYBOARD_INPUT_HANDLER:             ; called from INTB handler

    pha
    phx

    lda     KEYBOARD_FLAGS
    and     #RELEASE                ; check if we're releasing a key
    beq     @read_key               ; no? then just read the key and process it

    lda     KEYBOARD_FLAGS          
    eor     #RELEASE                ; toggle the release bit
    sta     KEYBOARD_FLAGS          ; store the new value
    lda     PORTA                   ; read to clear interrupt clear
    cmp     #$12                    ; left shift
    beq     @shift_up
    cmp     #$59
    beq     @shift_up
    jmp     @exit                   

@read_key:
    lda     PORTA
    cmp     #$f0
    beq     @key_release
    cmp     #$12                    ; left shift
    beq     @shift_down
    cmp     #$59                    ; right shift
    beq     @shift_down
    cmp     #$5A
    beq     @enter_key
    cmp     #$66
    beq     @backspace_key

    tax
    lda     KEYBOARD_FLAGS
    and     #SHIFT
    bne     @shifted_key

    lda     KEYBOARD_MAP, x
    jmp     @push_key

@backspace_key:
    lda     #$08
    jmp     @push_key

@enter_key:
    lda     #$0D
    jmp     @push_key

@shifted_key:
    lda     KEYBOARD_MAP_SHIFTED, x


@push_key:
    jsr     WRITE_BUFFER
    jmp     @exit

@shift_up:
    lda     KEYBOARD_FLAGS
    eor     #SHIFT
    sta     KEYBOARD_FLAGS
    jmp     @exit
    
@shift_down:
    lda     KEYBOARD_FLAGS
    ora     #SHIFT
    sta     KEYBOARD_FLAGS
    jmp     @exit

@key_release:
    lda     KEYBOARD_FLAGS
    ora     #RELEASE
    sta     KEYBOARD_FLAGS

@exit:
    plx
    pla
    rts
